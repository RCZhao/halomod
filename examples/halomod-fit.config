################################################################################
#                                                                              #
#                         HALOMOD-FIT CONFIG FILE                              # 
#                                                                              #  
################################################################################
# This is a template configuration file halomod-fit. Specify each parameter    #
# tailored to your application. All entries marked with ??? MUST be replaced   #
# with the relevant argument. Any argument that is optional is clearly marked  #
# and if you don't want it to be set, just put a "#" at the start of the line. #
#                                                                              #  
# The important part is the specification of the paramaters used in the fit.   #
# This is done as a list of 4 elements. The first is a string encoding the     #
# type of prior on the parameter (currently can take "flat" or "var").         #
# The next two entries have meanings dependent on the type of prior. The 4th   #
# gives an initial value for the MCMC chain for the parameter (make it as good #
# a guess as possible). In summary, they have the following form:              #
#      ["flat", min, max, guess]                                               #
#      ["var", mean, std. dev.,guess]                                          #
#                                                                              #
# Finally the other parameters of the model, which are not varied, can be      #
# specified under the Model section (with same variable names as in the        #
# HaloModel constructor).                                                      #
################################################################################

[Data] #########################################################################
# data_file is a file with 2 (or optionally 3) columns. The first column is the 
# ordinate values to fit to (eg. r), and the second is the values of the fitted
# quantity (eg. xi). The third column, if present, is the std. dev., which will
# be used to calculate the chi^2 likelihood if present. 
# Importantly, the ordinate values should be in units without h-dependence.
# This is so the fit can be adjusted (perhaps on the fly) to match the same
# ordinate values. The fitted quantity should be in the same units as the 
# HaloModel quantity.
# If cov_file is present, it will be preferentially used to calculate the chi^2
# likelihood. It should contain a square covariance matrix, the same length as
# the data in data_file.
data_file   = wrp.dat    ; 
cov_file    = cov.dat    ; OPTIONAL

[RunOptions] ###################################################################
# If relax is True, an error in calculation just results in -inf for the 
# likelihood, rather than the whole thing crashing. This is pretty useless as it
# stands, because errors are usually because of cosmology, and usually are 
# uncatchable. 
# nthreads specifies number of threads to use, but this will automatically get
# set to 1 if CAMB is being used on each iteration (otherwise the program will
# hang). 
# quantity is the name of the quantity you want to fit (in the HaloModel class). 
# der_params are a set of parameters you want to keep chains for as well (usually
# derived parameters of the main calculation). Note that if any of these is a 
# part of a dictionary in the HaloModel class, you must prefix it with the name
# of the dictionary with a colon (see example below). These are written as they
# would be in a python program, with square braces to form a list.
relax       = False      ; 
nthreads    = 8          ; Number of threads to use
quantity    = projected_corr_gal  ; the name of the actual quantity to fit
der_params  = ["hod_params:M_min","bias_effective","satellite_fraction","mass_effective"]
store_class = False      ; Store entire class as pickle file (WARNING: may not be very portable)

[MCMC] #########################################################################
nsamples    = 100      ; Number of samples to run (per walker)
burnin      = 0        ; Burnin size (per walker)
nwalkers    = 30       ; Number of walkers

[IO] ###########################################################################
outdir      = results  ; Directory to write results to
#prefix                ; Prefix to attach to output files (useful for multi-runs)
chunks      = 0        ; How many samples to take before writing to file  
verbose     = 1        ; How much info to write out (not really useful yet)

[CosmoParams] # ALL OPTIONAL ###################################################
# Here you an set which cosmological parameters you want to be varied in the 
# MCMC (typically none at all). NOTE: this doesn't set the fiducial cosmology,
# just the parameters that are to be fitted (see below for fiducial model
# parameters). These parameters can be specified as "flat" or "var" like any
# parameter, but can also be "cov", which uses covariance information in their
# prior. If so, the covar_data setting MUST BE SET, and should be either PLANCK,
# WMAP9, WMAP5 or WMAP3.

#covar_data  = PLANCK ; Cosmology to use for the covariance information

#sigma_8     = ["flat", 0.1,    2,0.8]
#n           = ["flat", 0.1,    1.5, 0.966]
#H0          = ["flat", 50,     90, 70.0]
#omegab_h2   = ["flat", 0.0025, 0.05, 0.02227]
#omegac_h2   = ["flat", 0.05,   0.2, 0.1116]

[hod_paramsParams] # ALL OPTIONAL ##############################################
M_1         = ["flat", 10.85, 16.2, 13.396]
alpha       = ["flat", 0.5,   1.9, 1.214]

[OtherParams] # ALL OPTIONAL ###################################################
#wdm_mass    = ["flat", 0.05,500, 200.0]
#gauss_width = ["flat", 0.1, 0.4]
#M_0         = ["flat", 10.5, 12.5]

[Model] ########################################################################
#
# Add here any arguments to send to the HaloModel constructor (ie. the base model)
# This will be the fiducial model for all calculations. Below is an example of 
# what this may look like. Any dictionary arguments must be given as they would in
# a python script.

scale_dependent_bias=True
halo_exclusion=ng_matched
lnk_min=-4
lnk_max=2
dlnk=0.02
omegab_h2=0.02227
omegac_h2=0.1116
n=0.966
sigma_8=0.8
H0=70.0
z=0.0369
hod_model=Zehavi05
transfer_fit=CAMB
transfer_options={"transfer__kmax":300,"transfer__k_per_logint":15}
nonlinear=True
cm_relation=duffy
bias_model=tinker10
ng=0.004536
force_flat=True
mf_fit=Tinker10
nthreads_2halo=1
dlog10m=0.04
takahashi=1


